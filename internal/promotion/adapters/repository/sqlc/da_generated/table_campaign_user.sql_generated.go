// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: table_campaign_user.sql

package da_generated

import (
	"context"
)

const createCampaignUser = `-- name: CreateCampaignUser :execrows
INSERT INTO campaign_user(campaign_id, user_id)
VALUES (?, ?)
`

type CreateCampaignUserParams struct {
	CampaignID int64 `json:"campaign_id"`
	UserID     int64 `json:"user_id"`
}

func (q *Queries) CreateCampaignUser(ctx context.Context, arg *CreateCampaignUserParams) (int64, error) {
	result, err := q.exec(ctx, q.createCampaignUserStmt, createCampaignUser, arg.CampaignID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getCampaignUser = `-- name: GetCampaignUser :one
select id, user_id, campaign_id, created_at, updated_at
from campaign_user where campaign_id = ? and user_id = ?
`

type GetCampaignUserParams struct {
	CampaignID int64 `json:"campaign_id"`
	UserID     int64 `json:"user_id"`
}

func (q *Queries) GetCampaignUser(ctx context.Context, arg *GetCampaignUserParams) (*CampaignUser, error) {
	row := q.queryRow(ctx, q.getCampaignUserStmt, getCampaignUser, arg.CampaignID, arg.UserID)
	var i CampaignUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CampaignID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
