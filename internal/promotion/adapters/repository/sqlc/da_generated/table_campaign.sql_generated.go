// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: table_campaign.sql

package da_generated

import (
	"context"
	"time"
)

const getCampaignByKey = `-- name: GetCampaignByKey :one
select id, campaign_key, status, name, start_at, end_at, created_at, updated_at
from campaign where campaign_key = ?
`

func (q *Queries) GetCampaignByKey(ctx context.Context, campaignKey string) (*Campaign, error) {
	row := q.queryRow(ctx, q.getCampaignByKeyStmt, getCampaignByKey, campaignKey)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.CampaignKey,
		&i.Status,
		&i.Name,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertCampaign = `-- name: InsertCampaign :execrows
insert into campaign (campaign_key, status, name, start_at, end_at)
VALUES (?, ?, ?, ?, ?)
`

type InsertCampaignParams struct {
	CampaignKey string         `json:"campaign_key"`
	Status      CampaignStatus `json:"status"`
	Name        string         `json:"name"`
	StartAt     time.Time      `json:"start_at"`
	EndAt       time.Time      `json:"end_at"`
}

func (q *Queries) InsertCampaign(ctx context.Context, arg *InsertCampaignParams) (int64, error) {
	result, err := q.exec(ctx, q.insertCampaignStmt, insertCampaign,
		arg.CampaignKey,
		arg.Status,
		arg.Name,
		arg.StartAt,
		arg.EndAt,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateCampaignById = `-- name: UpdateCampaignById :execrows
update campaign set status = ? and name = ? and start_at = ? and end_at = ?
where id = ?
`

type UpdateCampaignByIdParams struct {
	Status  CampaignStatus `json:"status"`
	Name    string         `json:"name"`
	StartAt time.Time      `json:"start_at"`
	EndAt   time.Time      `json:"end_at"`
	ID      int64          `json:"id"`
}

func (q *Queries) UpdateCampaignById(ctx context.Context, arg *UpdateCampaignByIdParams) (int64, error) {
	result, err := q.exec(ctx, q.updateCampaignByIdStmt, updateCampaignById,
		arg.Status,
		arg.Name,
		arg.StartAt,
		arg.EndAt,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
