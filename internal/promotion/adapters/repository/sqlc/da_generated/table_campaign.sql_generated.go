// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: table_campaign.sql

package da_generated

import (
	"context"
	"encoding/json"
)

const getCampaignById = `-- name: GetCampaignById :one
select id, status, name, metadata, created_at, updated_at
from campaign where id = ?
`

func (q *Queries) GetCampaignById(ctx context.Context, id int64) (*Campaign, error) {
	row := q.queryRow(ctx, q.getCampaignByIdStmt, getCampaignById, id)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Name,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateCampaign = `-- name: UpdateCampaign :execrows
insert into campaign (id, status, name, metadata)
VALUES (?, ?, ?,?)
ON DUPLICATE KEY UPDATE
    status = ?,
    name = ?,
    metadata = ?
`

type UpdateCampaignParams struct {
	ID       int64           `json:"id"`
	Status   CampaignStatus  `json:"status"`
	Name     string          `json:"name"`
	Metadata json.RawMessage `json:"metadata"`
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg *UpdateCampaignParams) (int64, error) {
	result, err := q.exec(ctx, q.updateCampaignStmt, updateCampaign,
		arg.ID,
		arg.Status,
		arg.Name,
		arg.Metadata,
		arg.Status,
		arg.Name,
		arg.Metadata,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
