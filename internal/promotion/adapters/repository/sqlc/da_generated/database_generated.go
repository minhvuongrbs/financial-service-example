// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package da_generated

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createVoucherUserStmt, err = db.PrepareContext(ctx, createVoucherUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateVoucherUser: %w", err)
	}
	if q.getCampaignByIdStmt, err = db.PrepareContext(ctx, getCampaignById); err != nil {
		return nil, fmt.Errorf("error preparing query GetCampaignById: %w", err)
	}
	if q.insertVoucherStmt, err = db.PrepareContext(ctx, insertVoucher); err != nil {
		return nil, fmt.Errorf("error preparing query InsertVoucher: %w", err)
	}
	if q.updateCampaignStmt, err = db.PrepareContext(ctx, updateCampaign); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCampaign: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createVoucherUserStmt != nil {
		if cerr := q.createVoucherUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createVoucherUserStmt: %w", cerr)
		}
	}
	if q.getCampaignByIdStmt != nil {
		if cerr := q.getCampaignByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCampaignByIdStmt: %w", cerr)
		}
	}
	if q.insertVoucherStmt != nil {
		if cerr := q.insertVoucherStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertVoucherStmt: %w", cerr)
		}
	}
	if q.updateCampaignStmt != nil {
		if cerr := q.updateCampaignStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCampaignStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	createVoucherUserStmt *sql.Stmt
	getCampaignByIdStmt   *sql.Stmt
	insertVoucherStmt     *sql.Stmt
	updateCampaignStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createVoucherUserStmt: q.createVoucherUserStmt,
		getCampaignByIdStmt:   q.getCampaignByIdStmt,
		insertVoucherStmt:     q.insertVoucherStmt,
		updateCampaignStmt:    q.updateCampaignStmt,
	}
}
